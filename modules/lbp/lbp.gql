extend type Query {
    lbps: [GqlLbp!]!
    lbp(id: ID!): GqlLbp!
    lbpGetChartData(id: ID!): [GqlLbpPriceData]!
}

extend type Mutation {
    lbpCreate(lbp: GqlLbpCreateInput!, signature: String!): GqlLbp!
    #lbpUpdate(lbp: GqlLbpUpdateInput!, signature: String!): GqlLbp!
}

input GqlLbpCreateInput {
    id: ID!
    address: String!
    name: String!
    description: String!
    tokenContractAddress: String!
    collateralTokenAddress: String!
    tokenAmount: String!
    collateralAmount: String!
    tokenStartWeight: Int!
    collateralStartWeight: Int!
    tokenEndWeight: Int!
    collateralEndWeight: Int!
    swapFeePercentage: String!
    bannerImageUrl: String!
    websiteUrl: String!
    tokenIconUrl: String!
    twitterUrl: String!
    mediumUrl: String!
    discordUrl: String!
    telegramUrl: String!
    startDate: String!
    endDate: String!
}

input GqlLbpUpdateInput {
    id: ID!
    name: String!
    description: String!
    websiteUrl: String!
    tokenIconUrl: String!
    twitterUrl: String!
    mediumUrl: String!
    discordUrl: String!
    telegramUrl: String!
}

type GqlLbp {
    id: ID!
    address: String!
    name: String!
    description: String!
    tokenContractAddress: String!
    collateralTokenAddress: String!
    tokenAmount: String!
    collateralAmount: String!
    tokenStartWeight: Int!
    collateralStartWeight: Int!
    tokenEndWeight: Int!
    collateralEndWeight: Int!
    swapFeePercentage: String!
    websiteUrl: String!
    tokenIconUrl: String!
    twitterUrl: String!
    mediumUrl: String!
    discordUrl: String!
    telegramUrl: String!
    startDate: String!
    endDate: String!
    bannerImageUrl: String!
    adminAddress: String!
    adminIsMultisig: Boolean!
}

type GqlLbpPriceData {
    timestamp: Int!
    price: Float!
    type: GqlLbpPriceType!
}

enum GqlLbpPriceType {
    PREDICTED
    REAL
}
