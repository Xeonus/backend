input GqlLgeCreateInput {
    id: ID!
    address: String!
    name: String!
    description: String!
    tokenContractAddress: String!
    collateralTokenAddress: String!
    tokenAmount: String!
    collateralAmount: String!
    tokenStartWeight: Int!
    collateralStartWeight: Int!
    tokenEndWeight: Int!
    collateralEndWeight: Int!
    swapFeePercentage: String!
    bannerImageUrl: String!
    websiteUrl: String!
    tokenIconUrl: String!
    twitterUrl: String!
    mediumUrl: String!
    discordUrl: String!
    telegramUrl: String!
    startDate: String!
    endDate: String!
}

input GqlLgeUpdateInput {
    id: ID!
    name: String!
    description: String!
    websiteUrl: String!
    tokenIconUrl: String!
    twitterUrl: String!
    mediumUrl: String!
    discordUrl: String!
    telegramUrl: String!
}

type GqlLge {
    id: ID!
    address: String!
    name: String!
    description: String!
    tokenContractAddress: String!
    collateralTokenAddress: String!
    tokenAmount: String!
    collateralAmount: String!
    tokenStartWeight: Int!
    collateralStartWeight: Int!
    tokenEndWeight: Int!
    collateralEndWeight: Int!
    swapFeePercentage: String!
    websiteUrl: String!
    tokenIconUrl: String!
    twitterUrl: String!
    mediumUrl: String!
    discordUrl: String!
    telegramUrl: String!
    startDate: String!
    endDate: String!
    bannerImageUrl: String!
    adminAddress: String!
    adminIsMultisig: Boolean!
}

type GqlLgePriceData {
    timestamp: Int!
    price: Float!
    type: String!
}

extend type Query {
    lges: [GqlLge!]!
    lge(id: ID!): GqlLge!
    getLgeChartData(id: ID!, steps: Int!): [GqlLgePriceData]!
}

extend type Mutation {
    lgeCreate(lge: GqlLgeCreateInput!, signature: String!): GqlLge!
    #LgeUpdate(Lge: GqlLgeUpdateInput!, signature: String!): GqlLge!
}
